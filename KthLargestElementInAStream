class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.nums = nums
        self.min_heap = self.nums[:k]
        heapq.heapify(self.min_heap)
        for val in self.nums[k:]:
            heapq.heappushpop(self.min_heap, val)

    def add(self, val: int) -> int:
        if len(self.min_heap) == self.k:
            heapq.heappushpop(self.min_heap, val)
        else:
            heapq.heappush(self.min_heap, val)
        return self.min_heap[0]