class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def same(self, sub, ori):
            if sub == None and ori == None:
                return True
            if sub == None or ori == None:
                return False
            if sub.val == ori.val:
                return same(self, sub.left, ori.left) and same(self, sub.right, ori.right)
            return False
        
        if not subRoot:
            return True
        if not root:
            return False
        if same(self, root,subRoot):
            return True
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)