class Solution:
    def tree2str(self, root: Optional[TreeNode]) -> str:
        
        def pre(root):
            if not root: return ''
            
            l = pre(root.left)
            r = pre(root.right)
            
            if not l and not r:
                return str(root.val)
            if l and r:
                return f'{root.val}({l})({r})'
            if l:
                return f'{root.val}({l})'
            if r:
                return f'{root.val}()({r})'
        return pre(root)